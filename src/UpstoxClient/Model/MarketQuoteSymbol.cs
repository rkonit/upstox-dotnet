/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UpstoxClient.Client.SwaggerDateConverter;
namespace UpstoxClient.Model
{
    /// <summary>
    /// MarketQuoteSymbol
    /// </summary>
    [DataContract]
        public partial class MarketQuoteSymbol :  IEquatable<MarketQuoteSymbol>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketQuoteSymbol" /> class.
        /// </summary>
        /// <param name="ohlc">ohlc.</param>
        /// <param name="depth">depth.</param>
        public MarketQuoteSymbol(Ohlc ohlc = default(Ohlc), DepthMap depth = default(DepthMap))
        {
            this.Ohlc = ohlc;
            this.Depth = depth;
        }
        
        /// <summary>
        /// Gets or Sets Ohlc
        /// </summary>
        [DataMember(Name="ohlc", EmitDefaultValue=false)]
        public Ohlc Ohlc { get; set; }

        /// <summary>
        /// Gets or Sets Depth
        /// </summary>
        [DataMember(Name="depth", EmitDefaultValue=false)]
        public DepthMap Depth { get; set; }

        /// <summary>
        /// Time in milliseconds at which the feeds was updated
        /// </summary>
        /// <value>Time in milliseconds at which the feeds was updated</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; private set; }

        /// <summary>
        /// Key issued by Upstox for the instrument
        /// </summary>
        /// <value>Key issued by Upstox for the instrument</value>
        [DataMember(Name="instrument_token", EmitDefaultValue=false)]
        public string InstrumentToken { get; private set; }

        /// <summary>
        /// Shows the trading symbol of the instrument
        /// </summary>
        /// <value>Shows the trading symbol of the instrument</value>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; private set; }

        /// <summary>
        /// The last traded price of symbol
        /// </summary>
        /// <value>The last traded price of symbol</value>
        [DataMember(Name="last_price", EmitDefaultValue=false)]
        public double? LastPrice { get; private set; }

        /// <summary>
        /// The volume traded today on symbol
        /// </summary>
        /// <value>The volume traded today on symbol</value>
        [DataMember(Name="volume", EmitDefaultValue=false)]
        public long? Volume { get; private set; }

        /// <summary>
        /// Average price
        /// </summary>
        /// <value>Average price</value>
        [DataMember(Name="average_price", EmitDefaultValue=false)]
        public double? AveragePrice { get; private set; }

        /// <summary>
        /// Total number of outstanding contracts held by market participants exchange-wide (only F&amp;O)
        /// </summary>
        /// <value>Total number of outstanding contracts held by market participants exchange-wide (only F&amp;O)</value>
        [DataMember(Name="oi", EmitDefaultValue=false)]
        public double? Oi { get; private set; }

        /// <summary>
        /// The absolute change from yesterday&#x27;s close to last traded price
        /// </summary>
        /// <value>The absolute change from yesterday&#x27;s close to last traded price</value>
        [DataMember(Name="net_change", EmitDefaultValue=false)]
        public double? NetChange { get; private set; }

        /// <summary>
        /// The total number of bid quantity available for trading
        /// </summary>
        /// <value>The total number of bid quantity available for trading</value>
        [DataMember(Name="total_buy_quantity", EmitDefaultValue=false)]
        public double? TotalBuyQuantity { get; private set; }

        /// <summary>
        /// The total number of ask quantity available for trading
        /// </summary>
        /// <value>The total number of ask quantity available for trading</value>
        [DataMember(Name="total_sell_quantity", EmitDefaultValue=false)]
        public double? TotalSellQuantity { get; private set; }

        /// <summary>
        /// The lower circuit of symbol
        /// </summary>
        /// <value>The lower circuit of symbol</value>
        [DataMember(Name="lower_circuit_limit", EmitDefaultValue=false)]
        public double? LowerCircuitLimit { get; private set; }

        /// <summary>
        /// The upper circuit of symbol
        /// </summary>
        /// <value>The upper circuit of symbol</value>
        [DataMember(Name="upper_circuit_limit", EmitDefaultValue=false)]
        public double? UpperCircuitLimit { get; private set; }

        /// <summary>
        /// Time in milliseconds at which last trade happened
        /// </summary>
        /// <value>Time in milliseconds at which last trade happened</value>
        [DataMember(Name="last_trade_time", EmitDefaultValue=false)]
        public string LastTradeTime { get; private set; }

        /// <summary>
        /// Gets or Sets OiDayHigh
        /// </summary>
        [DataMember(Name="oi_day_high", EmitDefaultValue=false)]
        public double? OiDayHigh { get; private set; }

        /// <summary>
        /// Gets or Sets OiDayLow
        /// </summary>
        [DataMember(Name="oi_day_low", EmitDefaultValue=false)]
        public double? OiDayLow { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarketQuoteSymbol {\n");
            sb.Append("  Ohlc: ").Append(Ohlc).Append("\n");
            sb.Append("  Depth: ").Append(Depth).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  InstrumentToken: ").Append(InstrumentToken).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  LastPrice: ").Append(LastPrice).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  AveragePrice: ").Append(AveragePrice).Append("\n");
            sb.Append("  Oi: ").Append(Oi).Append("\n");
            sb.Append("  NetChange: ").Append(NetChange).Append("\n");
            sb.Append("  TotalBuyQuantity: ").Append(TotalBuyQuantity).Append("\n");
            sb.Append("  TotalSellQuantity: ").Append(TotalSellQuantity).Append("\n");
            sb.Append("  LowerCircuitLimit: ").Append(LowerCircuitLimit).Append("\n");
            sb.Append("  UpperCircuitLimit: ").Append(UpperCircuitLimit).Append("\n");
            sb.Append("  LastTradeTime: ").Append(LastTradeTime).Append("\n");
            sb.Append("  OiDayHigh: ").Append(OiDayHigh).Append("\n");
            sb.Append("  OiDayLow: ").Append(OiDayLow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketQuoteSymbol);
        }

        /// <summary>
        /// Returns true if MarketQuoteSymbol instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketQuoteSymbol to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketQuoteSymbol input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ohlc == input.Ohlc ||
                    (this.Ohlc != null &&
                    this.Ohlc.Equals(input.Ohlc))
                ) && 
                (
                    this.Depth == input.Depth ||
                    (this.Depth != null &&
                    this.Depth.Equals(input.Depth))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.InstrumentToken == input.InstrumentToken ||
                    (this.InstrumentToken != null &&
                    this.InstrumentToken.Equals(input.InstrumentToken))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.LastPrice == input.LastPrice ||
                    (this.LastPrice != null &&
                    this.LastPrice.Equals(input.LastPrice))
                ) && 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                ) && 
                (
                    this.AveragePrice == input.AveragePrice ||
                    (this.AveragePrice != null &&
                    this.AveragePrice.Equals(input.AveragePrice))
                ) && 
                (
                    this.Oi == input.Oi ||
                    (this.Oi != null &&
                    this.Oi.Equals(input.Oi))
                ) && 
                (
                    this.NetChange == input.NetChange ||
                    (this.NetChange != null &&
                    this.NetChange.Equals(input.NetChange))
                ) && 
                (
                    this.TotalBuyQuantity == input.TotalBuyQuantity ||
                    (this.TotalBuyQuantity != null &&
                    this.TotalBuyQuantity.Equals(input.TotalBuyQuantity))
                ) && 
                (
                    this.TotalSellQuantity == input.TotalSellQuantity ||
                    (this.TotalSellQuantity != null &&
                    this.TotalSellQuantity.Equals(input.TotalSellQuantity))
                ) && 
                (
                    this.LowerCircuitLimit == input.LowerCircuitLimit ||
                    (this.LowerCircuitLimit != null &&
                    this.LowerCircuitLimit.Equals(input.LowerCircuitLimit))
                ) && 
                (
                    this.UpperCircuitLimit == input.UpperCircuitLimit ||
                    (this.UpperCircuitLimit != null &&
                    this.UpperCircuitLimit.Equals(input.UpperCircuitLimit))
                ) && 
                (
                    this.LastTradeTime == input.LastTradeTime ||
                    (this.LastTradeTime != null &&
                    this.LastTradeTime.Equals(input.LastTradeTime))
                ) && 
                (
                    this.OiDayHigh == input.OiDayHigh ||
                    (this.OiDayHigh != null &&
                    this.OiDayHigh.Equals(input.OiDayHigh))
                ) && 
                (
                    this.OiDayLow == input.OiDayLow ||
                    (this.OiDayLow != null &&
                    this.OiDayLow.Equals(input.OiDayLow))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ohlc != null)
                    hashCode = hashCode * 59 + this.Ohlc.GetHashCode();
                if (this.Depth != null)
                    hashCode = hashCode * 59 + this.Depth.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.InstrumentToken != null)
                    hashCode = hashCode * 59 + this.InstrumentToken.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.LastPrice != null)
                    hashCode = hashCode * 59 + this.LastPrice.GetHashCode();
                if (this.Volume != null)
                    hashCode = hashCode * 59 + this.Volume.GetHashCode();
                if (this.AveragePrice != null)
                    hashCode = hashCode * 59 + this.AveragePrice.GetHashCode();
                if (this.Oi != null)
                    hashCode = hashCode * 59 + this.Oi.GetHashCode();
                if (this.NetChange != null)
                    hashCode = hashCode * 59 + this.NetChange.GetHashCode();
                if (this.TotalBuyQuantity != null)
                    hashCode = hashCode * 59 + this.TotalBuyQuantity.GetHashCode();
                if (this.TotalSellQuantity != null)
                    hashCode = hashCode * 59 + this.TotalSellQuantity.GetHashCode();
                if (this.LowerCircuitLimit != null)
                    hashCode = hashCode * 59 + this.LowerCircuitLimit.GetHashCode();
                if (this.UpperCircuitLimit != null)
                    hashCode = hashCode * 59 + this.UpperCircuitLimit.GetHashCode();
                if (this.LastTradeTime != null)
                    hashCode = hashCode * 59 + this.LastTradeTime.GetHashCode();
                if (this.OiDayHigh != null)
                    hashCode = hashCode * 59 + this.OiDayHigh.GetHashCode();
                if (this.OiDayLow != null)
                    hashCode = hashCode * 59 + this.OiDayLow.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
