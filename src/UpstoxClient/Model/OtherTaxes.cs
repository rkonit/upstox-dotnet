/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UpstoxClient.Client.SwaggerDateConverter;
namespace UpstoxClient.Model
{
    /// <summary>
    /// OtherTaxes
    /// </summary>
    [DataContract]
        public partial class OtherTaxes :  IEquatable<OtherTaxes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OtherTaxes" /> class.
        /// </summary>
        /// <param name="transaction">Transaction charges.</param>
        /// <param name="clearing">Clearing charges.</param>
        /// <param name="ipft">IPF charges.</param>
        /// <param name="sebiTurnover">SEBI turnover charges.</param>
        public OtherTaxes(float? transaction = default(float?), float? clearing = default(float?), float? ipft = default(float?), float? sebiTurnover = default(float?))
        {
            this.Transaction = transaction;
            this.Clearing = clearing;
            this.Ipft = ipft;
            this.SebiTurnover = sebiTurnover;
        }
        
        /// <summary>
        /// Transaction charges
        /// </summary>
        /// <value>Transaction charges</value>
        [DataMember(Name="transaction", EmitDefaultValue=false)]
        public float? Transaction { get; set; }

        /// <summary>
        /// Clearing charges
        /// </summary>
        /// <value>Clearing charges</value>
        [DataMember(Name="clearing", EmitDefaultValue=false)]
        public float? Clearing { get; set; }

        /// <summary>
        /// IPF charges
        /// </summary>
        /// <value>IPF charges</value>
        [DataMember(Name="ipft", EmitDefaultValue=false)]
        public float? Ipft { get; set; }

        /// <summary>
        /// SEBI turnover charges
        /// </summary>
        /// <value>SEBI turnover charges</value>
        [DataMember(Name="sebi_turnover", EmitDefaultValue=false)]
        public float? SebiTurnover { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OtherTaxes {\n");
            sb.Append("  Transaction: ").Append(Transaction).Append("\n");
            sb.Append("  Clearing: ").Append(Clearing).Append("\n");
            sb.Append("  Ipft: ").Append(Ipft).Append("\n");
            sb.Append("  SebiTurnover: ").Append(SebiTurnover).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OtherTaxes);
        }

        /// <summary>
        /// Returns true if OtherTaxes instances are equal
        /// </summary>
        /// <param name="input">Instance of OtherTaxes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OtherTaxes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Transaction == input.Transaction ||
                    (this.Transaction != null &&
                    this.Transaction.Equals(input.Transaction))
                ) && 
                (
                    this.Clearing == input.Clearing ||
                    (this.Clearing != null &&
                    this.Clearing.Equals(input.Clearing))
                ) && 
                (
                    this.Ipft == input.Ipft ||
                    (this.Ipft != null &&
                    this.Ipft.Equals(input.Ipft))
                ) && 
                (
                    this.SebiTurnover == input.SebiTurnover ||
                    (this.SebiTurnover != null &&
                    this.SebiTurnover.Equals(input.SebiTurnover))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Transaction != null)
                    hashCode = hashCode * 59 + this.Transaction.GetHashCode();
                if (this.Clearing != null)
                    hashCode = hashCode * 59 + this.Clearing.GetHashCode();
                if (this.Ipft != null)
                    hashCode = hashCode * 59 + this.Ipft.GetHashCode();
                if (this.SebiTurnover != null)
                    hashCode = hashCode * 59 + this.SebiTurnover.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
