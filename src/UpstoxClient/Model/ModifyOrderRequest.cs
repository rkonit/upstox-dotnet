/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UpstoxClient.Client.SwaggerDateConverter;
namespace UpstoxClient.Model
{
    /// <summary>
    /// ModifyOrderRequest
    /// </summary>
    [DataContract]
        public partial class ModifyOrderRequest :  IEquatable<ModifyOrderRequest>, IValidatableObject
    {
        /// <summary>
        /// Order validity (DAY- Day and IOC- Immediate or Cancel (IOC) order)
        /// </summary>
        /// <value>Order validity (DAY- Day and IOC- Immediate or Cancel (IOC) order)</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ValidityEnum
        {
            /// <summary>
            /// Enum DAY for value: DAY
            /// </summary>
            [EnumMember(Value = "DAY")]
            DAY = 1,
            /// <summary>
            /// Enum IOC for value: IOC
            /// </summary>
            [EnumMember(Value = "IOC")]
            IOC = 2        }
        /// <summary>
        /// Order validity (DAY- Day and IOC- Immediate or Cancel (IOC) order)
        /// </summary>
        /// <value>Order validity (DAY- Day and IOC- Immediate or Cancel (IOC) order)</value>
        [DataMember(Name="validity", EmitDefaultValue=false)]
        public ValidityEnum Validity { get; set; }
        /// <summary>
        /// Type of order. It can be one of the following MARKET refers to market order LIMILT refers to Limit Order SL refers to Stop Loss Limit SL-M refers to Stop Loss Market
        /// </summary>
        /// <value>Type of order. It can be one of the following MARKET refers to market order LIMILT refers to Limit Order SL refers to Stop Loss Limit SL-M refers to Stop Loss Market</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum OrderTypeEnum
        {
            /// <summary>
            /// Enum MARKET for value: MARKET
            /// </summary>
            [EnumMember(Value = "MARKET")]
            MARKET = 1,
            /// <summary>
            /// Enum LIMIT for value: LIMIT
            /// </summary>
            [EnumMember(Value = "LIMIT")]
            LIMIT = 2,
            /// <summary>
            /// Enum SL for value: SL
            /// </summary>
            [EnumMember(Value = "SL")]
            SL = 3,
            /// <summary>
            /// Enum SLM for value: SL-M
            /// </summary>
            [EnumMember(Value = "SL-M")]
            SLM = 4        }
        /// <summary>
        /// Type of order. It can be one of the following MARKET refers to market order LIMILT refers to Limit Order SL refers to Stop Loss Limit SL-M refers to Stop Loss Market
        /// </summary>
        /// <value>Type of order. It can be one of the following MARKET refers to market order LIMILT refers to Limit Order SL refers to Stop Loss Limit SL-M refers to Stop Loss Market</value>
        [DataMember(Name="order_type", EmitDefaultValue=false)]
        public OrderTypeEnum OrderType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModifyOrderRequest" /> class.
        /// </summary>
        /// <param name="quantity">Quantity with which the order was placed.</param>
        /// <param name="validity">Order validity (DAY- Day and IOC- Immediate or Cancel (IOC) order) (required).</param>
        /// <param name="price">Price at which the order was placed (required).</param>
        /// <param name="orderId">The order ID for which the order must be modified (required).</param>
        /// <param name="orderType">Type of order. It can be one of the following MARKET refers to market order LIMILT refers to Limit Order SL refers to Stop Loss Limit SL-M refers to Stop Loss Market (required).</param>
        /// <param name="disclosedQuantity">The quantity that should be disclosed in the market depth.</param>
        /// <param name="triggerPrice">If the order is a stop loss order then the trigger price to be set is mentioned here (required).</param>
        public ModifyOrderRequest(int? quantity = default(int?), ValidityEnum validity = default(ValidityEnum), float? price = default(float?), string orderId = default(string), OrderTypeEnum orderType = default(OrderTypeEnum), int? disclosedQuantity = default(int?), float? triggerPrice = default(float?))
        {
            // to ensure "validity" is required (not null)
            if (validity == null)
            {
                throw new InvalidDataException("validity is a required property for ModifyOrderRequest and cannot be null");
            }
            else
            {
                this.Validity = validity;
            }
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new InvalidDataException("price is a required property for ModifyOrderRequest and cannot be null");
            }
            else
            {
                this.Price = price;
            }
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new InvalidDataException("orderId is a required property for ModifyOrderRequest and cannot be null");
            }
            else
            {
                this.OrderId = orderId;
            }
            // to ensure "orderType" is required (not null)
            if (orderType == null)
            {
                throw new InvalidDataException("orderType is a required property for ModifyOrderRequest and cannot be null");
            }
            else
            {
                this.OrderType = orderType;
            }
            // to ensure "triggerPrice" is required (not null)
            if (triggerPrice == null)
            {
                throw new InvalidDataException("triggerPrice is a required property for ModifyOrderRequest and cannot be null");
            }
            else
            {
                this.TriggerPrice = triggerPrice;
            }
            this.Quantity = quantity;
            this.DisclosedQuantity = disclosedQuantity;
        }
        
        /// <summary>
        /// Quantity with which the order was placed
        /// </summary>
        /// <value>Quantity with which the order was placed</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }


        /// <summary>
        /// Price at which the order was placed
        /// </summary>
        /// <value>Price at which the order was placed</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public float? Price { get; set; }

        /// <summary>
        /// The order ID for which the order must be modified
        /// </summary>
        /// <value>The order ID for which the order must be modified</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; set; }


        /// <summary>
        /// The quantity that should be disclosed in the market depth
        /// </summary>
        /// <value>The quantity that should be disclosed in the market depth</value>
        [DataMember(Name="disclosed_quantity", EmitDefaultValue=false)]
        public int? DisclosedQuantity { get; set; }

        /// <summary>
        /// If the order is a stop loss order then the trigger price to be set is mentioned here
        /// </summary>
        /// <value>If the order is a stop loss order then the trigger price to be set is mentioned here</value>
        [DataMember(Name="trigger_price", EmitDefaultValue=false)]
        public float? TriggerPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModifyOrderRequest {\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Validity: ").Append(Validity).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  DisclosedQuantity: ").Append(DisclosedQuantity).Append("\n");
            sb.Append("  TriggerPrice: ").Append(TriggerPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModifyOrderRequest);
        }

        /// <summary>
        /// Returns true if ModifyOrderRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ModifyOrderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModifyOrderRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Validity == input.Validity ||
                    (this.Validity != null &&
                    this.Validity.Equals(input.Validity))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.OrderType == input.OrderType ||
                    (this.OrderType != null &&
                    this.OrderType.Equals(input.OrderType))
                ) && 
                (
                    this.DisclosedQuantity == input.DisclosedQuantity ||
                    (this.DisclosedQuantity != null &&
                    this.DisclosedQuantity.Equals(input.DisclosedQuantity))
                ) && 
                (
                    this.TriggerPrice == input.TriggerPrice ||
                    (this.TriggerPrice != null &&
                    this.TriggerPrice.Equals(input.TriggerPrice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Validity != null)
                    hashCode = hashCode * 59 + this.Validity.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.OrderType != null)
                    hashCode = hashCode * 59 + this.OrderType.GetHashCode();
                if (this.DisclosedQuantity != null)
                    hashCode = hashCode * 59 + this.DisclosedQuantity.GetHashCode();
                if (this.TriggerPrice != null)
                    hashCode = hashCode * 59 + this.TriggerPrice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
