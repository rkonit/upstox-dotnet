/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UpstoxClient.Client.SwaggerDateConverter;
namespace UpstoxClient.Model
{
    /// <summary>
    /// Response data for brokerage
    /// </summary>
    [DataContract]
        public partial class TradeWiseMetaData :  IEquatable<TradeWiseMetaData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TradeWiseMetaData" /> class.
        /// </summary>
        public TradeWiseMetaData()
        {
        }
        
        /// <summary>
        /// Total count of trades in the trade wise P and L report
        /// </summary>
        /// <value>Total count of trades in the trade wise P and L report</value>
        [DataMember(Name="trades_count", EmitDefaultValue=false)]
        public int? TradesCount { get; private set; }

        /// <summary>
        /// Maximum number of trades in a page of the trade wise P and L report API
        /// </summary>
        /// <value>Maximum number of trades in a page of the trade wise P and L report API</value>
        [DataMember(Name="page_size_limit", EmitDefaultValue=false)]
        public int? PageSizeLimit { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TradeWiseMetaData {\n");
            sb.Append("  TradesCount: ").Append(TradesCount).Append("\n");
            sb.Append("  PageSizeLimit: ").Append(PageSizeLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TradeWiseMetaData);
        }

        /// <summary>
        /// Returns true if TradeWiseMetaData instances are equal
        /// </summary>
        /// <param name="input">Instance of TradeWiseMetaData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradeWiseMetaData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TradesCount == input.TradesCount ||
                    (this.TradesCount != null &&
                    this.TradesCount.Equals(input.TradesCount))
                ) && 
                (
                    this.PageSizeLimit == input.PageSizeLimit ||
                    (this.PageSizeLimit != null &&
                    this.PageSizeLimit.Equals(input.PageSizeLimit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TradesCount != null)
                    hashCode = hashCode * 59 + this.TradesCount.GetHashCode();
                if (this.PageSizeLimit != null)
                    hashCode = hashCode * 59 + this.PageSizeLimit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
