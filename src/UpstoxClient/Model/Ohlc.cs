/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UpstoxClient.Client.SwaggerDateConverter;
namespace UpstoxClient.Model
{
    /// <summary>
    /// Ohlc
    /// </summary>
    [DataContract]
        public partial class Ohlc :  IEquatable<Ohlc>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ohlc" /> class.
        /// </summary>
        public Ohlc()
        {
        }
        
        /// <summary>
        /// The open price of the trading session
        /// </summary>
        /// <value>The open price of the trading session</value>
        [DataMember(Name="open", EmitDefaultValue=false)]
        public double? Open { get; private set; }

        /// <summary>
        /// The high price of the trading session
        /// </summary>
        /// <value>The high price of the trading session</value>
        [DataMember(Name="high", EmitDefaultValue=false)]
        public double? High { get; private set; }

        /// <summary>
        /// The low price of the trading session
        /// </summary>
        /// <value>The low price of the trading session</value>
        [DataMember(Name="low", EmitDefaultValue=false)]
        public double? Low { get; private set; }

        /// <summary>
        /// The close price of the symbol from the previous session of trading
        /// </summary>
        /// <value>The close price of the symbol from the previous session of trading</value>
        [DataMember(Name="close", EmitDefaultValue=false)]
        public double? Close { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ohlc {\n");
            sb.Append("  Open: ").Append(Open).Append("\n");
            sb.Append("  High: ").Append(High).Append("\n");
            sb.Append("  Low: ").Append(Low).Append("\n");
            sb.Append("  Close: ").Append(Close).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Ohlc);
        }

        /// <summary>
        /// Returns true if Ohlc instances are equal
        /// </summary>
        /// <param name="input">Instance of Ohlc to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ohlc input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Open == input.Open ||
                    (this.Open != null &&
                    this.Open.Equals(input.Open))
                ) && 
                (
                    this.High == input.High ||
                    (this.High != null &&
                    this.High.Equals(input.High))
                ) && 
                (
                    this.Low == input.Low ||
                    (this.Low != null &&
                    this.Low.Equals(input.Low))
                ) && 
                (
                    this.Close == input.Close ||
                    (this.Close != null &&
                    this.Close.Equals(input.Close))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Open != null)
                    hashCode = hashCode * 59 + this.Open.GetHashCode();
                if (this.High != null)
                    hashCode = hashCode * 59 + this.High.GetHashCode();
                if (this.Low != null)
                    hashCode = hashCode * 59 + this.Low.GetHashCode();
                if (this.Close != null)
                    hashCode = hashCode * 59 + this.Close.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
