/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UpstoxClient.Client.SwaggerDateConverter;
namespace UpstoxClient.Model
{
    /// <summary>
    /// Taxes levied on order
    /// </summary>
    [DataContract]
        public partial class ProfitAndLossChargesTaxes :  IEquatable<ProfitAndLossChargesTaxes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfitAndLossChargesTaxes" /> class.
        /// </summary>
        /// <param name="gst">GST charges.</param>
        /// <param name="stt">STT charges.</param>
        /// <param name="stampDuty">Stamp duty charges.</param>
        public ProfitAndLossChargesTaxes(float? gst = default(float?), float? stt = default(float?), float? stampDuty = default(float?))
        {
            this.Gst = gst;
            this.Stt = stt;
            this.StampDuty = stampDuty;
        }
        
        /// <summary>
        /// GST charges
        /// </summary>
        /// <value>GST charges</value>
        [DataMember(Name="gst", EmitDefaultValue=false)]
        public float? Gst { get; set; }

        /// <summary>
        /// STT charges
        /// </summary>
        /// <value>STT charges</value>
        [DataMember(Name="stt", EmitDefaultValue=false)]
        public float? Stt { get; set; }

        /// <summary>
        /// Stamp duty charges
        /// </summary>
        /// <value>Stamp duty charges</value>
        [DataMember(Name="stamp_duty", EmitDefaultValue=false)]
        public float? StampDuty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProfitAndLossChargesTaxes {\n");
            sb.Append("  Gst: ").Append(Gst).Append("\n");
            sb.Append("  Stt: ").Append(Stt).Append("\n");
            sb.Append("  StampDuty: ").Append(StampDuty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProfitAndLossChargesTaxes);
        }

        /// <summary>
        /// Returns true if ProfitAndLossChargesTaxes instances are equal
        /// </summary>
        /// <param name="input">Instance of ProfitAndLossChargesTaxes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfitAndLossChargesTaxes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Gst == input.Gst ||
                    (this.Gst != null &&
                    this.Gst.Equals(input.Gst))
                ) && 
                (
                    this.Stt == input.Stt ||
                    (this.Stt != null &&
                    this.Stt.Equals(input.Stt))
                ) && 
                (
                    this.StampDuty == input.StampDuty ||
                    (this.StampDuty != null &&
                    this.StampDuty.Equals(input.StampDuty))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Gst != null)
                    hashCode = hashCode * 59 + this.Gst.GetHashCode();
                if (this.Stt != null)
                    hashCode = hashCode * 59 + this.Stt.GetHashCode();
                if (this.StampDuty != null)
                    hashCode = hashCode * 59 + this.StampDuty.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
