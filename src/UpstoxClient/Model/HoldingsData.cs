/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UpstoxClient.Client.SwaggerDateConverter;
namespace UpstoxClient.Model
{
    /// <summary>
    /// Response data for holdings
    /// </summary>
    [DataContract]
        public partial class HoldingsData :  IEquatable<HoldingsData>, IValidatableObject
    {
        /// <summary>
        /// Exchange of the trading symbol
        /// </summary>
        /// <value>Exchange of the trading symbol</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ExchangeEnum
        {
            /// <summary>
            /// Enum NSE for value: NSE
            /// </summary>
            [EnumMember(Value = "NSE")]
            NSE = 1,
            /// <summary>
            /// Enum NFO for value: NFO
            /// </summary>
            [EnumMember(Value = "NFO")]
            NFO = 2,
            /// <summary>
            /// Enum CDS for value: CDS
            /// </summary>
            [EnumMember(Value = "CDS")]
            CDS = 3,
            /// <summary>
            /// Enum BSE for value: BSE
            /// </summary>
            [EnumMember(Value = "BSE")]
            BSE = 4,
            /// <summary>
            /// Enum BFO for value: BFO
            /// </summary>
            [EnumMember(Value = "BFO")]
            BFO = 5,
            /// <summary>
            /// Enum BCD for value: BCD
            /// </summary>
            [EnumMember(Value = "BCD")]
            BCD = 6,
            /// <summary>
            /// Enum MCX for value: MCX
            /// </summary>
            [EnumMember(Value = "MCX")]
            MCX = 7        }
        /// <summary>
        /// Exchange of the trading symbol
        /// </summary>
        /// <value>Exchange of the trading symbol</value>
        [DataMember(Name="exchange", EmitDefaultValue=false)]
        public ExchangeEnum? Exchange { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HoldingsData" /> class.
        /// </summary>
        public HoldingsData()
        {
        }
        
        /// <summary>
        /// The standard ISIN representing stocks listed on multiple exchanges
        /// </summary>
        /// <value>The standard ISIN representing stocks listed on multiple exchanges</value>
        [DataMember(Name="isin", EmitDefaultValue=false)]
        public string Isin { get; private set; }

        /// <summary>
        /// Quantity either blocked towards open or completed order
        /// </summary>
        /// <value>Quantity either blocked towards open or completed order</value>
        [DataMember(Name="cnc_used_quantity", EmitDefaultValue=false)]
        public int? CncUsedQuantity { get; private set; }

        /// <summary>
        /// Category of collateral assigned by RMS
        /// </summary>
        /// <value>Category of collateral assigned by RMS</value>
        [DataMember(Name="collateral_type", EmitDefaultValue=false)]
        public string CollateralType { get; private set; }

        /// <summary>
        /// Name of the company
        /// </summary>
        /// <value>Name of the company</value>
        [DataMember(Name="company_name", EmitDefaultValue=false)]
        public string CompanyName { get; private set; }

        /// <summary>
        /// This is the haircut percentage applied from RMS (applicable incase of collateral)
        /// </summary>
        /// <value>This is the haircut percentage applied from RMS (applicable incase of collateral)</value>
        [DataMember(Name="haircut", EmitDefaultValue=false)]
        public float? Haircut { get; private set; }

        /// <summary>
        /// Shows if the order was either Intraday, Delivery, CO or OCO
        /// </summary>
        /// <value>Shows if the order was either Intraday, Delivery, CO or OCO</value>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public string Product { get; private set; }

        /// <summary>
        /// The total holding qty
        /// </summary>
        /// <value>The total holding qty</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; private set; }

        /// <summary>
        /// Shows the trading symbol of the instrument
        /// </summary>
        /// <value>Shows the trading symbol of the instrument</value>
        [DataMember(Name="tradingsymbol", EmitDefaultValue=false)]
        public string Tradingsymbol { get; private set; }

        /// <summary>
        /// The last traded price of the instrument
        /// </summary>
        /// <value>The last traded price of the instrument</value>
        [DataMember(Name="last_price", EmitDefaultValue=false)]
        public float? LastPrice { get; private set; }

        /// <summary>
        /// Closing price of the instrument from the last trading day
        /// </summary>
        /// <value>Closing price of the instrument from the last trading day</value>
        [DataMember(Name="close_price", EmitDefaultValue=false)]
        public float? ClosePrice { get; private set; }

        /// <summary>
        /// Profit and Loss
        /// </summary>
        /// <value>Profit and Loss</value>
        [DataMember(Name="pnl", EmitDefaultValue=false)]
        public float? Pnl { get; private set; }

        /// <summary>
        /// Day&#x27;s change in absolute value for the stock
        /// </summary>
        /// <value>Day&#x27;s change in absolute value for the stock</value>
        [DataMember(Name="day_change", EmitDefaultValue=false)]
        public float? DayChange { get; private set; }

        /// <summary>
        /// Day&#x27;s change in percentage for the stock
        /// </summary>
        /// <value>Day&#x27;s change in percentage for the stock</value>
        [DataMember(Name="day_change_percentage", EmitDefaultValue=false)]
        public float? DayChangePercentage { get; private set; }

        /// <summary>
        /// Key issued by Upstox for the instrument
        /// </summary>
        /// <value>Key issued by Upstox for the instrument</value>
        [DataMember(Name="instrument_token", EmitDefaultValue=false)]
        public string InstrumentToken { get; private set; }

        /// <summary>
        /// Average price at which the net holding quantity was acquired
        /// </summary>
        /// <value>Average price at which the net holding quantity was acquired</value>
        [DataMember(Name="average_price", EmitDefaultValue=false)]
        public float? AveragePrice { get; private set; }

        /// <summary>
        /// Quantity marked as collateral by RMS on users request
        /// </summary>
        /// <value>Quantity marked as collateral by RMS on users request</value>
        [DataMember(Name="collateral_quantity", EmitDefaultValue=false)]
        public int? CollateralQuantity { get; private set; }

        /// <summary>
        /// Gets or Sets CollateralUpdateQuantity
        /// </summary>
        [DataMember(Name="collateral_update_quantity", EmitDefaultValue=false)]
        public int? CollateralUpdateQuantity { get; private set; }

        /// <summary>
        /// Quantity on T+1 day after order execution
        /// </summary>
        /// <value>Quantity on T+1 day after order execution</value>
        [DataMember(Name="t1_quantity", EmitDefaultValue=false)]
        public int? T1Quantity { get; private set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HoldingsData {\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  CncUsedQuantity: ").Append(CncUsedQuantity).Append("\n");
            sb.Append("  CollateralType: ").Append(CollateralType).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  Haircut: ").Append(Haircut).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Tradingsymbol: ").Append(Tradingsymbol).Append("\n");
            sb.Append("  LastPrice: ").Append(LastPrice).Append("\n");
            sb.Append("  ClosePrice: ").Append(ClosePrice).Append("\n");
            sb.Append("  Pnl: ").Append(Pnl).Append("\n");
            sb.Append("  DayChange: ").Append(DayChange).Append("\n");
            sb.Append("  DayChangePercentage: ").Append(DayChangePercentage).Append("\n");
            sb.Append("  InstrumentToken: ").Append(InstrumentToken).Append("\n");
            sb.Append("  AveragePrice: ").Append(AveragePrice).Append("\n");
            sb.Append("  CollateralQuantity: ").Append(CollateralQuantity).Append("\n");
            sb.Append("  CollateralUpdateQuantity: ").Append(CollateralUpdateQuantity).Append("\n");
            sb.Append("  T1Quantity: ").Append(T1Quantity).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HoldingsData);
        }

        /// <summary>
        /// Returns true if HoldingsData instances are equal
        /// </summary>
        /// <param name="input">Instance of HoldingsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HoldingsData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                ) && 
                (
                    this.CncUsedQuantity == input.CncUsedQuantity ||
                    (this.CncUsedQuantity != null &&
                    this.CncUsedQuantity.Equals(input.CncUsedQuantity))
                ) && 
                (
                    this.CollateralType == input.CollateralType ||
                    (this.CollateralType != null &&
                    this.CollateralType.Equals(input.CollateralType))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.Haircut == input.Haircut ||
                    (this.Haircut != null &&
                    this.Haircut.Equals(input.Haircut))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Tradingsymbol == input.Tradingsymbol ||
                    (this.Tradingsymbol != null &&
                    this.Tradingsymbol.Equals(input.Tradingsymbol))
                ) && 
                (
                    this.LastPrice == input.LastPrice ||
                    (this.LastPrice != null &&
                    this.LastPrice.Equals(input.LastPrice))
                ) && 
                (
                    this.ClosePrice == input.ClosePrice ||
                    (this.ClosePrice != null &&
                    this.ClosePrice.Equals(input.ClosePrice))
                ) && 
                (
                    this.Pnl == input.Pnl ||
                    (this.Pnl != null &&
                    this.Pnl.Equals(input.Pnl))
                ) && 
                (
                    this.DayChange == input.DayChange ||
                    (this.DayChange != null &&
                    this.DayChange.Equals(input.DayChange))
                ) && 
                (
                    this.DayChangePercentage == input.DayChangePercentage ||
                    (this.DayChangePercentage != null &&
                    this.DayChangePercentage.Equals(input.DayChangePercentage))
                ) && 
                (
                    this.InstrumentToken == input.InstrumentToken ||
                    (this.InstrumentToken != null &&
                    this.InstrumentToken.Equals(input.InstrumentToken))
                ) && 
                (
                    this.AveragePrice == input.AveragePrice ||
                    (this.AveragePrice != null &&
                    this.AveragePrice.Equals(input.AveragePrice))
                ) && 
                (
                    this.CollateralQuantity == input.CollateralQuantity ||
                    (this.CollateralQuantity != null &&
                    this.CollateralQuantity.Equals(input.CollateralQuantity))
                ) && 
                (
                    this.CollateralUpdateQuantity == input.CollateralUpdateQuantity ||
                    (this.CollateralUpdateQuantity != null &&
                    this.CollateralUpdateQuantity.Equals(input.CollateralUpdateQuantity))
                ) && 
                (
                    this.T1Quantity == input.T1Quantity ||
                    (this.T1Quantity != null &&
                    this.T1Quantity.Equals(input.T1Quantity))
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    (this.Exchange != null &&
                    this.Exchange.Equals(input.Exchange))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Isin != null)
                    hashCode = hashCode * 59 + this.Isin.GetHashCode();
                if (this.CncUsedQuantity != null)
                    hashCode = hashCode * 59 + this.CncUsedQuantity.GetHashCode();
                if (this.CollateralType != null)
                    hashCode = hashCode * 59 + this.CollateralType.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.Haircut != null)
                    hashCode = hashCode * 59 + this.Haircut.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Tradingsymbol != null)
                    hashCode = hashCode * 59 + this.Tradingsymbol.GetHashCode();
                if (this.LastPrice != null)
                    hashCode = hashCode * 59 + this.LastPrice.GetHashCode();
                if (this.ClosePrice != null)
                    hashCode = hashCode * 59 + this.ClosePrice.GetHashCode();
                if (this.Pnl != null)
                    hashCode = hashCode * 59 + this.Pnl.GetHashCode();
                if (this.DayChange != null)
                    hashCode = hashCode * 59 + this.DayChange.GetHashCode();
                if (this.DayChangePercentage != null)
                    hashCode = hashCode * 59 + this.DayChangePercentage.GetHashCode();
                if (this.InstrumentToken != null)
                    hashCode = hashCode * 59 + this.InstrumentToken.GetHashCode();
                if (this.AveragePrice != null)
                    hashCode = hashCode * 59 + this.AveragePrice.GetHashCode();
                if (this.CollateralQuantity != null)
                    hashCode = hashCode * 59 + this.CollateralQuantity.GetHashCode();
                if (this.CollateralUpdateQuantity != null)
                    hashCode = hashCode * 59 + this.CollateralUpdateQuantity.GetHashCode();
                if (this.T1Quantity != null)
                    hashCode = hashCode * 59 + this.T1Quantity.GetHashCode();
                if (this.Exchange != null)
                    hashCode = hashCode * 59 + this.Exchange.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
