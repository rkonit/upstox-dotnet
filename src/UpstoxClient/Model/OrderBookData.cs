/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UpstoxClient.Client.SwaggerDateConverter;
namespace UpstoxClient.Model
{
    /// <summary>
    /// Response data for order Book
    /// </summary>
    [DataContract]
        public partial class OrderBookData :  IEquatable<OrderBookData>, IValidatableObject
    {
        /// <summary>
        /// Exchange to which the order is associated
        /// </summary>
        /// <value>Exchange to which the order is associated</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ExchangeEnum
        {
            /// <summary>
            /// Enum NSE for value: NSE
            /// </summary>
            [EnumMember(Value = "NSE")]
            NSE = 1,
            /// <summary>
            /// Enum NFO for value: NFO
            /// </summary>
            [EnumMember(Value = "NFO")]
            NFO = 2,
            /// <summary>
            /// Enum CDS for value: CDS
            /// </summary>
            [EnumMember(Value = "CDS")]
            CDS = 3,
            /// <summary>
            /// Enum BSE for value: BSE
            /// </summary>
            [EnumMember(Value = "BSE")]
            BSE = 4,
            /// <summary>
            /// Enum BFO for value: BFO
            /// </summary>
            [EnumMember(Value = "BFO")]
            BFO = 5,
            /// <summary>
            /// Enum BCD for value: BCD
            /// </summary>
            [EnumMember(Value = "BCD")]
            BCD = 6,
            /// <summary>
            /// Enum MCX for value: MCX
            /// </summary>
            [EnumMember(Value = "MCX")]
            MCX = 7        }
        /// <summary>
        /// Exchange to which the order is associated
        /// </summary>
        /// <value>Exchange to which the order is associated</value>
        [DataMember(Name="exchange", EmitDefaultValue=false)]
        public ExchangeEnum? Exchange { get; set; }
        /// <summary>
        /// Shows if the order was either Intraday, Delivery, CoverOrder or OneCancelsOther
        /// </summary>
        /// <value>Shows if the order was either Intraday, Delivery, CoverOrder or OneCancelsOther</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ProductEnum
        {
            /// <summary>
            /// Enum I for value: I
            /// </summary>
            [EnumMember(Value = "I")]
            I = 1,
            /// <summary>
            /// Enum D for value: D
            /// </summary>
            [EnumMember(Value = "D")]
            D = 2,
            /// <summary>
            /// Enum CO for value: CO
            /// </summary>
            [EnumMember(Value = "CO")]
            CO = 3,
            /// <summary>
            /// Enum OCO for value: OCO
            /// </summary>
            [EnumMember(Value = "OCO")]
            OCO = 4,
            /// <summary>
            /// Enum MTF for value: MTF
            /// </summary>
            [EnumMember(Value = "MTF")]
            MTF = 5        }
        /// <summary>
        /// Shows if the order was either Intraday, Delivery, CoverOrder or OneCancelsOther
        /// </summary>
        /// <value>Shows if the order was either Intraday, Delivery, CoverOrder or OneCancelsOther</value>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public ProductEnum? Product { get; set; }
        /// <summary>
        /// Type of order. It can be one of the following MARKET refers to market order&lt;br&gt;LIMIT refers to Limit Order&lt;br&gt;SL refers to Stop Loss Limit&lt;br&gt;SL-M refers to Stop loss market
        /// </summary>
        /// <value>Type of order. It can be one of the following MARKET refers to market order&lt;br&gt;LIMIT refers to Limit Order&lt;br&gt;SL refers to Stop Loss Limit&lt;br&gt;SL-M refers to Stop loss market</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum OrderTypeEnum
        {
            /// <summary>
            /// Enum MARKET for value: MARKET
            /// </summary>
            [EnumMember(Value = "MARKET")]
            MARKET = 1,
            /// <summary>
            /// Enum LIMIT for value: LIMIT
            /// </summary>
            [EnumMember(Value = "LIMIT")]
            LIMIT = 2,
            /// <summary>
            /// Enum SL for value: SL
            /// </summary>
            [EnumMember(Value = "SL")]
            SL = 3,
            /// <summary>
            /// Enum SLM for value: SL-M
            /// </summary>
            [EnumMember(Value = "SL-M")]
            SLM = 4        }
        /// <summary>
        /// Type of order. It can be one of the following MARKET refers to market order&lt;br&gt;LIMIT refers to Limit Order&lt;br&gt;SL refers to Stop Loss Limit&lt;br&gt;SL-M refers to Stop loss market
        /// </summary>
        /// <value>Type of order. It can be one of the following MARKET refers to market order&lt;br&gt;LIMIT refers to Limit Order&lt;br&gt;SL refers to Stop Loss Limit&lt;br&gt;SL-M refers to Stop loss market</value>
        [DataMember(Name="order_type", EmitDefaultValue=false)]
        public OrderTypeEnum? OrderType { get; set; }
        /// <summary>
        /// Order validity (DAY- Day and IOC- Immediate or Cancel (IOC) order)
        /// </summary>
        /// <value>Order validity (DAY- Day and IOC- Immediate or Cancel (IOC) order)</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ValidityEnum
        {
            /// <summary>
            /// Enum DAY for value: DAY
            /// </summary>
            [EnumMember(Value = "DAY")]
            DAY = 1,
            /// <summary>
            /// Enum IOC for value: IOC
            /// </summary>
            [EnumMember(Value = "IOC")]
            IOC = 2,
            /// <summary>
            /// Enum EOS for value: EOS
            /// </summary>
            [EnumMember(Value = "EOS")]
            EOS = 3        }
        /// <summary>
        /// Order validity (DAY- Day and IOC- Immediate or Cancel (IOC) order)
        /// </summary>
        /// <value>Order validity (DAY- Day and IOC- Immediate or Cancel (IOC) order)</value>
        [DataMember(Name="validity", EmitDefaultValue=false)]
        public ValidityEnum? Validity { get; set; }
        /// <summary>
        /// Indicates whether the order was a buy or sell order
        /// </summary>
        /// <value>Indicates whether the order was a buy or sell order</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TransactionTypeEnum
        {
            /// <summary>
            /// Enum BUY for value: BUY
            /// </summary>
            [EnumMember(Value = "BUY")]
            BUY = 1,
            /// <summary>
            /// Enum SELL for value: SELL
            /// </summary>
            [EnumMember(Value = "SELL")]
            SELL = 2        }
        /// <summary>
        /// Indicates whether the order was a buy or sell order
        /// </summary>
        /// <value>Indicates whether the order was a buy or sell order</value>
        [DataMember(Name="transaction_type", EmitDefaultValue=false)]
        public TransactionTypeEnum? TransactionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderBookData" /> class.
        /// </summary>
        public OrderBookData()
        {
        }
        


        /// <summary>
        /// Price at which the order was placed
        /// </summary>
        /// <value>Price at which the order was placed</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public float? Price { get; private set; }

        /// <summary>
        /// Quantity with which the order was placed
        /// </summary>
        /// <value>Quantity with which the order was placed</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; private set; }

        /// <summary>
        /// Indicates the current status of the order. Valid order status’ are outlined in the table below
        /// </summary>
        /// <value>Indicates the current status of the order. Valid order status’ are outlined in the table below</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; private set; }

        /// <summary>
        /// Gets or Sets Guid
        /// </summary>
        [DataMember(Name="guid", EmitDefaultValue=false)]
        public string Guid { get; private set; }

        /// <summary>
        /// Tag to uniquely identify an order
        /// </summary>
        /// <value>Tag to uniquely identify an order</value>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; private set; }

        /// <summary>
        /// Identifier issued by Upstox used for subscribing to live market quotes
        /// </summary>
        /// <value>Identifier issued by Upstox used for subscribing to live market quotes</value>
        [DataMember(Name="instrument_token", EmitDefaultValue=false)]
        public string InstrumentToken { get; private set; }

        /// <summary>
        /// Uniquely identifies the user
        /// </summary>
        /// <value>Uniquely identifies the user</value>
        [DataMember(Name="placed_by", EmitDefaultValue=false)]
        public string PlacedBy { get; private set; }

        /// <summary>
        /// Shows the trading symbol of the instrument
        /// </summary>
        /// <value>Shows the trading symbol of the instrument</value>
        [DataMember(Name="tradingsymbol", EmitDefaultValue=false)]
        public string Tradingsymbol { get; private set; }

        /// <summary>
        /// Shows the trading symbol of the instrument
        /// </summary>
        /// <value>Shows the trading symbol of the instrument</value>
        [DataMember(Name="trading_symbol", EmitDefaultValue=false)]
        public string TradingSymbol { get; private set; }



        /// <summary>
        /// If the order was a stop loss order then the trigger price set is mentioned here
        /// </summary>
        /// <value>If the order was a stop loss order then the trigger price set is mentioned here</value>
        [DataMember(Name="trigger_price", EmitDefaultValue=false)]
        public float? TriggerPrice { get; private set; }

        /// <summary>
        /// The quantity that should be disclosed in the market depth
        /// </summary>
        /// <value>The quantity that should be disclosed in the market depth</value>
        [DataMember(Name="disclosed_quantity", EmitDefaultValue=false)]
        public int? DisclosedQuantity { get; private set; }


        /// <summary>
        /// Average price at which the qty got traded
        /// </summary>
        /// <value>Average price at which the qty got traded</value>
        [DataMember(Name="average_price", EmitDefaultValue=false)]
        public float? AveragePrice { get; private set; }

        /// <summary>
        /// The total quantity traded from this particular order
        /// </summary>
        /// <value>The total quantity traded from this particular order</value>
        [DataMember(Name="filled_quantity", EmitDefaultValue=false)]
        public int? FilledQuantity { get; private set; }

        /// <summary>
        /// Pending quantity to be filled
        /// </summary>
        /// <value>Pending quantity to be filled</value>
        [DataMember(Name="pending_quantity", EmitDefaultValue=false)]
        public int? PendingQuantity { get; private set; }

        /// <summary>
        /// Indicates the reason when any order is rejected, not modified or cancelled
        /// </summary>
        /// <value>Indicates the reason when any order is rejected, not modified or cancelled</value>
        [DataMember(Name="status_message", EmitDefaultValue=false)]
        public string StatusMessage { get; private set; }

        /// <summary>
        /// Description of the order&#x27;s status as received from RMS
        /// </summary>
        /// <value>Description of the order&#x27;s status as received from RMS</value>
        [DataMember(Name="status_message_raw", EmitDefaultValue=false)]
        public string StatusMessageRaw { get; private set; }

        /// <summary>
        /// Unique order ID assigned by the exchange for the order placed
        /// </summary>
        /// <value>Unique order ID assigned by the exchange for the order placed</value>
        [DataMember(Name="exchange_order_id", EmitDefaultValue=false)]
        public string ExchangeOrderId { get; private set; }

        /// <summary>
        /// In case the order is part of the second or third leg of a CO or OCO, the parent order ID is indicated here
        /// </summary>
        /// <value>In case the order is part of the second or third leg of a CO or OCO, the parent order ID is indicated here</value>
        [DataMember(Name="parent_order_id", EmitDefaultValue=false)]
        public string ParentOrderId { get; private set; }

        /// <summary>
        /// Unique order ID assigned internally for the order placed
        /// </summary>
        /// <value>Unique order ID assigned internally for the order placed</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; private set; }

        /// <summary>
        /// Order complexity
        /// </summary>
        /// <value>Order complexity</value>
        [DataMember(Name="variety", EmitDefaultValue=false)]
        public string Variety { get; private set; }

        /// <summary>
        /// User readable timestamp at which the order was placed
        /// </summary>
        /// <value>User readable timestamp at which the order was placed</value>
        [DataMember(Name="order_timestamp", EmitDefaultValue=false)]
        public string OrderTimestamp { get; private set; }

        /// <summary>
        /// User readable time at which the order was placed or updated
        /// </summary>
        /// <value>User readable time at which the order was placed or updated</value>
        [DataMember(Name="exchange_timestamp", EmitDefaultValue=false)]
        public string ExchangeTimestamp { get; private set; }

        /// <summary>
        /// Signifies if the order is an After Market Order
        /// </summary>
        /// <value>Signifies if the order is an After Market Order</value>
        [DataMember(Name="is_amo", EmitDefaultValue=false)]
        public bool? IsAmo { get; private set; }

        /// <summary>
        /// Apart from 1st order it shows the count of how many requests were sent
        /// </summary>
        /// <value>Apart from 1st order it shows the count of how many requests were sent</value>
        [DataMember(Name="order_request_id", EmitDefaultValue=false)]
        public string OrderRequestId { get; private set; }

        /// <summary>
        /// The order reference ID for which the order must be modified
        /// </summary>
        /// <value>The order reference ID for which the order must be modified</value>
        [DataMember(Name="order_ref_id", EmitDefaultValue=false)]
        public string OrderRefId { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderBookData {\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  InstrumentToken: ").Append(InstrumentToken).Append("\n");
            sb.Append("  PlacedBy: ").Append(PlacedBy).Append("\n");
            sb.Append("  Tradingsymbol: ").Append(Tradingsymbol).Append("\n");
            sb.Append("  TradingSymbol: ").Append(TradingSymbol).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  Validity: ").Append(Validity).Append("\n");
            sb.Append("  TriggerPrice: ").Append(TriggerPrice).Append("\n");
            sb.Append("  DisclosedQuantity: ").Append(DisclosedQuantity).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  AveragePrice: ").Append(AveragePrice).Append("\n");
            sb.Append("  FilledQuantity: ").Append(FilledQuantity).Append("\n");
            sb.Append("  PendingQuantity: ").Append(PendingQuantity).Append("\n");
            sb.Append("  StatusMessage: ").Append(StatusMessage).Append("\n");
            sb.Append("  StatusMessageRaw: ").Append(StatusMessageRaw).Append("\n");
            sb.Append("  ExchangeOrderId: ").Append(ExchangeOrderId).Append("\n");
            sb.Append("  ParentOrderId: ").Append(ParentOrderId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Variety: ").Append(Variety).Append("\n");
            sb.Append("  OrderTimestamp: ").Append(OrderTimestamp).Append("\n");
            sb.Append("  ExchangeTimestamp: ").Append(ExchangeTimestamp).Append("\n");
            sb.Append("  IsAmo: ").Append(IsAmo).Append("\n");
            sb.Append("  OrderRequestId: ").Append(OrderRequestId).Append("\n");
            sb.Append("  OrderRefId: ").Append(OrderRefId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderBookData);
        }

        /// <summary>
        /// Returns true if OrderBookData instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderBookData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderBookData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Exchange == input.Exchange ||
                    (this.Exchange != null &&
                    this.Exchange.Equals(input.Exchange))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Guid == input.Guid ||
                    (this.Guid != null &&
                    this.Guid.Equals(input.Guid))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.InstrumentToken == input.InstrumentToken ||
                    (this.InstrumentToken != null &&
                    this.InstrumentToken.Equals(input.InstrumentToken))
                ) && 
                (
                    this.PlacedBy == input.PlacedBy ||
                    (this.PlacedBy != null &&
                    this.PlacedBy.Equals(input.PlacedBy))
                ) && 
                (
                    this.Tradingsymbol == input.Tradingsymbol ||
                    (this.Tradingsymbol != null &&
                    this.Tradingsymbol.Equals(input.Tradingsymbol))
                ) && 
                (
                    this.TradingSymbol == input.TradingSymbol ||
                    (this.TradingSymbol != null &&
                    this.TradingSymbol.Equals(input.TradingSymbol))
                ) && 
                (
                    this.OrderType == input.OrderType ||
                    (this.OrderType != null &&
                    this.OrderType.Equals(input.OrderType))
                ) && 
                (
                    this.Validity == input.Validity ||
                    (this.Validity != null &&
                    this.Validity.Equals(input.Validity))
                ) && 
                (
                    this.TriggerPrice == input.TriggerPrice ||
                    (this.TriggerPrice != null &&
                    this.TriggerPrice.Equals(input.TriggerPrice))
                ) && 
                (
                    this.DisclosedQuantity == input.DisclosedQuantity ||
                    (this.DisclosedQuantity != null &&
                    this.DisclosedQuantity.Equals(input.DisclosedQuantity))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                ) && 
                (
                    this.AveragePrice == input.AveragePrice ||
                    (this.AveragePrice != null &&
                    this.AveragePrice.Equals(input.AveragePrice))
                ) && 
                (
                    this.FilledQuantity == input.FilledQuantity ||
                    (this.FilledQuantity != null &&
                    this.FilledQuantity.Equals(input.FilledQuantity))
                ) && 
                (
                    this.PendingQuantity == input.PendingQuantity ||
                    (this.PendingQuantity != null &&
                    this.PendingQuantity.Equals(input.PendingQuantity))
                ) && 
                (
                    this.StatusMessage == input.StatusMessage ||
                    (this.StatusMessage != null &&
                    this.StatusMessage.Equals(input.StatusMessage))
                ) && 
                (
                    this.StatusMessageRaw == input.StatusMessageRaw ||
                    (this.StatusMessageRaw != null &&
                    this.StatusMessageRaw.Equals(input.StatusMessageRaw))
                ) && 
                (
                    this.ExchangeOrderId == input.ExchangeOrderId ||
                    (this.ExchangeOrderId != null &&
                    this.ExchangeOrderId.Equals(input.ExchangeOrderId))
                ) && 
                (
                    this.ParentOrderId == input.ParentOrderId ||
                    (this.ParentOrderId != null &&
                    this.ParentOrderId.Equals(input.ParentOrderId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Variety == input.Variety ||
                    (this.Variety != null &&
                    this.Variety.Equals(input.Variety))
                ) && 
                (
                    this.OrderTimestamp == input.OrderTimestamp ||
                    (this.OrderTimestamp != null &&
                    this.OrderTimestamp.Equals(input.OrderTimestamp))
                ) && 
                (
                    this.ExchangeTimestamp == input.ExchangeTimestamp ||
                    (this.ExchangeTimestamp != null &&
                    this.ExchangeTimestamp.Equals(input.ExchangeTimestamp))
                ) && 
                (
                    this.IsAmo == input.IsAmo ||
                    (this.IsAmo != null &&
                    this.IsAmo.Equals(input.IsAmo))
                ) && 
                (
                    this.OrderRequestId == input.OrderRequestId ||
                    (this.OrderRequestId != null &&
                    this.OrderRequestId.Equals(input.OrderRequestId))
                ) && 
                (
                    this.OrderRefId == input.OrderRefId ||
                    (this.OrderRefId != null &&
                    this.OrderRefId.Equals(input.OrderRefId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Exchange != null)
                    hashCode = hashCode * 59 + this.Exchange.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Guid != null)
                    hashCode = hashCode * 59 + this.Guid.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.InstrumentToken != null)
                    hashCode = hashCode * 59 + this.InstrumentToken.GetHashCode();
                if (this.PlacedBy != null)
                    hashCode = hashCode * 59 + this.PlacedBy.GetHashCode();
                if (this.Tradingsymbol != null)
                    hashCode = hashCode * 59 + this.Tradingsymbol.GetHashCode();
                if (this.TradingSymbol != null)
                    hashCode = hashCode * 59 + this.TradingSymbol.GetHashCode();
                if (this.OrderType != null)
                    hashCode = hashCode * 59 + this.OrderType.GetHashCode();
                if (this.Validity != null)
                    hashCode = hashCode * 59 + this.Validity.GetHashCode();
                if (this.TriggerPrice != null)
                    hashCode = hashCode * 59 + this.TriggerPrice.GetHashCode();
                if (this.DisclosedQuantity != null)
                    hashCode = hashCode * 59 + this.DisclosedQuantity.GetHashCode();
                if (this.TransactionType != null)
                    hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                if (this.AveragePrice != null)
                    hashCode = hashCode * 59 + this.AveragePrice.GetHashCode();
                if (this.FilledQuantity != null)
                    hashCode = hashCode * 59 + this.FilledQuantity.GetHashCode();
                if (this.PendingQuantity != null)
                    hashCode = hashCode * 59 + this.PendingQuantity.GetHashCode();
                if (this.StatusMessage != null)
                    hashCode = hashCode * 59 + this.StatusMessage.GetHashCode();
                if (this.StatusMessageRaw != null)
                    hashCode = hashCode * 59 + this.StatusMessageRaw.GetHashCode();
                if (this.ExchangeOrderId != null)
                    hashCode = hashCode * 59 + this.ExchangeOrderId.GetHashCode();
                if (this.ParentOrderId != null)
                    hashCode = hashCode * 59 + this.ParentOrderId.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.Variety != null)
                    hashCode = hashCode * 59 + this.Variety.GetHashCode();
                if (this.OrderTimestamp != null)
                    hashCode = hashCode * 59 + this.OrderTimestamp.GetHashCode();
                if (this.ExchangeTimestamp != null)
                    hashCode = hashCode * 59 + this.ExchangeTimestamp.GetHashCode();
                if (this.IsAmo != null)
                    hashCode = hashCode * 59 + this.IsAmo.GetHashCode();
                if (this.OrderRequestId != null)
                    hashCode = hashCode * 59 + this.OrderRequestId.GetHashCode();
                if (this.OrderRefId != null)
                    hashCode = hashCode * 59 + this.OrderRefId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
