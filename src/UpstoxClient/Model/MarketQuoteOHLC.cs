/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UpstoxClient.Client.SwaggerDateConverter;
namespace UpstoxClient.Model
{
    /// <summary>
    /// MarketQuoteOHLC
    /// </summary>
    [DataContract]
        public partial class MarketQuoteOHLC :  IEquatable<MarketQuoteOHLC>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketQuoteOHLC" /> class.
        /// </summary>
        /// <param name="ohlc">ohlc.</param>
        /// <param name="instrumentToken">instrumentToken.</param>
        public MarketQuoteOHLC(Ohlc ohlc = default(Ohlc), string instrumentToken = default(string))
        {
            this.Ohlc = ohlc;
            this.InstrumentToken = instrumentToken;
        }
        
        /// <summary>
        /// Gets or Sets Ohlc
        /// </summary>
        [DataMember(Name="ohlc", EmitDefaultValue=false)]
        public Ohlc Ohlc { get; set; }

        /// <summary>
        /// The last traded price of symbol
        /// </summary>
        /// <value>The last traded price of symbol</value>
        [DataMember(Name="last_price", EmitDefaultValue=false)]
        public float? LastPrice { get; private set; }

        /// <summary>
        /// Gets or Sets InstrumentToken
        /// </summary>
        [DataMember(Name="instrument_token", EmitDefaultValue=false)]
        public string InstrumentToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarketQuoteOHLC {\n");
            sb.Append("  Ohlc: ").Append(Ohlc).Append("\n");
            sb.Append("  LastPrice: ").Append(LastPrice).Append("\n");
            sb.Append("  InstrumentToken: ").Append(InstrumentToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketQuoteOHLC);
        }

        /// <summary>
        /// Returns true if MarketQuoteOHLC instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketQuoteOHLC to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketQuoteOHLC input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ohlc == input.Ohlc ||
                    (this.Ohlc != null &&
                    this.Ohlc.Equals(input.Ohlc))
                ) && 
                (
                    this.LastPrice == input.LastPrice ||
                    (this.LastPrice != null &&
                    this.LastPrice.Equals(input.LastPrice))
                ) && 
                (
                    this.InstrumentToken == input.InstrumentToken ||
                    (this.InstrumentToken != null &&
                    this.InstrumentToken.Equals(input.InstrumentToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ohlc != null)
                    hashCode = hashCode * 59 + this.Ohlc.GetHashCode();
                if (this.LastPrice != null)
                    hashCode = hashCode * 59 + this.LastPrice.GetHashCode();
                if (this.InstrumentToken != null)
                    hashCode = hashCode * 59 + this.InstrumentToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
