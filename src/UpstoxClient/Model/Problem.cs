/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UpstoxClient.Client.SwaggerDateConverter;
namespace UpstoxClient.Model
{
    /// <summary>
    /// Problem
    /// </summary>
    [DataContract]
        public partial class Problem :  IEquatable<Problem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Problem" /> class.
        /// </summary>
        /// <param name="errorCode">Unique code for the error state.</param>
        /// <param name="message">Verbose message for the error state.</param>
        /// <param name="propertyPath">Path to property failing validation.</param>
        /// <param name="invalidValue">Invalid value for the property failing validation.</param>
        /// <param name="errorCode">errorCode.</param>
        /// <param name="propertyPath">propertyPath.</param>
        /// <param name="invalidValue">invalidValue.</param>
        public Problem(string message = default(string), string errorCode = default(string), string propertyPath = default(string), Object invalidValue = default(Object))
        {
            this.Message = message;
            this.ErrorCode = errorCode;
            this.PropertyPath = propertyPath;
            this.InvalidValue = invalidValue;
        }

        /// <summary>
        /// Verbose message for the error state
        /// </summary>
        /// <value>Verbose message for the error state</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [DataMember(Name="error_code", EmitDefaultValue=false)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// Gets or Sets PropertyPath
        /// </summary>
        [DataMember(Name="property_path", EmitDefaultValue=false)]
        public string PropertyPath { get; set; }

        /// <summary>
        /// Gets or Sets InvalidValue
        /// </summary>
        [DataMember(Name="invalid_value", EmitDefaultValue=false)]
        public Object InvalidValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Problem {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  PropertyPath: ").Append(PropertyPath).Append("\n");
            sb.Append("  InvalidValue: ").Append(InvalidValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Problem);
        }

        /// <summary>
        /// Returns true if Problem instances are equal
        /// </summary>
        /// <param name="input">Instance of Problem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Problem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                ) && 
                (
                    this.PropertyPath == input.PropertyPath ||
                    (this.PropertyPath != null &&
                    this.PropertyPath.Equals(input.PropertyPath))
                ) && 
                (
                    this.InvalidValue == input.InvalidValue ||
                    (this.InvalidValue != null &&
                    this.InvalidValue.Equals(input.InvalidValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.ErrorCode != null)
                    hashCode = hashCode * 59 + this.ErrorCode.GetHashCode();
                if (this.PropertyPath != null)
                    hashCode = hashCode * 59 + this.PropertyPath.GetHashCode();
                if (this.InvalidValue != null)
                    hashCode = hashCode * 59 + this.InvalidValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
