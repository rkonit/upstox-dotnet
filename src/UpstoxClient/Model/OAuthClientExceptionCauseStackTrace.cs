/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UpstoxClient.Client.SwaggerDateConverter;
namespace UpstoxClient.Model
{
    /// <summary>
    /// OAuthClientExceptionCauseStackTrace
    /// </summary>
    [DataContract]
        public partial class OAuthClientExceptionCauseStackTrace :  IEquatable<OAuthClientExceptionCauseStackTrace>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthClientExceptionCauseStackTrace" /> class.
        /// </summary>
        /// <param name="classLoaderName">classLoaderName.</param>
        /// <param name="moduleName">moduleName.</param>
        /// <param name="moduleVersion">moduleVersion.</param>
        /// <param name="methodName">methodName.</param>
        /// <param name="fileName">fileName.</param>
        /// <param name="lineNumber">lineNumber.</param>
        /// <param name="className">className.</param>
        /// <param name="nativeMethod">nativeMethod.</param>
        public OAuthClientExceptionCauseStackTrace(string classLoaderName = default(string), string moduleName = default(string), string moduleVersion = default(string), string methodName = default(string), string fileName = default(string), int? lineNumber = default(int?), string className = default(string), bool? nativeMethod = default(bool?))
        {
            this.ClassLoaderName = classLoaderName;
            this.ModuleName = moduleName;
            this.ModuleVersion = moduleVersion;
            this.MethodName = methodName;
            this.FileName = fileName;
            this.LineNumber = lineNumber;
            this.ClassName = className;
            this.NativeMethod = nativeMethod;
        }
        
        /// <summary>
        /// Gets or Sets ClassLoaderName
        /// </summary>
        [DataMember(Name="classLoaderName", EmitDefaultValue=false)]
        public string ClassLoaderName { get; set; }

        /// <summary>
        /// Gets or Sets ModuleName
        /// </summary>
        [DataMember(Name="moduleName", EmitDefaultValue=false)]
        public string ModuleName { get; set; }

        /// <summary>
        /// Gets or Sets ModuleVersion
        /// </summary>
        [DataMember(Name="moduleVersion", EmitDefaultValue=false)]
        public string ModuleVersion { get; set; }

        /// <summary>
        /// Gets or Sets MethodName
        /// </summary>
        [DataMember(Name="methodName", EmitDefaultValue=false)]
        public string MethodName { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets LineNumber
        /// </summary>
        [DataMember(Name="lineNumber", EmitDefaultValue=false)]
        public int? LineNumber { get; set; }

        /// <summary>
        /// Gets or Sets ClassName
        /// </summary>
        [DataMember(Name="className", EmitDefaultValue=false)]
        public string ClassName { get; set; }

        /// <summary>
        /// Gets or Sets NativeMethod
        /// </summary>
        [DataMember(Name="nativeMethod", EmitDefaultValue=false)]
        public bool? NativeMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OAuthClientExceptionCauseStackTrace {\n");
            sb.Append("  ClassLoaderName: ").Append(ClassLoaderName).Append("\n");
            sb.Append("  ModuleName: ").Append(ModuleName).Append("\n");
            sb.Append("  ModuleVersion: ").Append(ModuleVersion).Append("\n");
            sb.Append("  MethodName: ").Append(MethodName).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("  ClassName: ").Append(ClassName).Append("\n");
            sb.Append("  NativeMethod: ").Append(NativeMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OAuthClientExceptionCauseStackTrace);
        }

        /// <summary>
        /// Returns true if OAuthClientExceptionCauseStackTrace instances are equal
        /// </summary>
        /// <param name="input">Instance of OAuthClientExceptionCauseStackTrace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OAuthClientExceptionCauseStackTrace input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClassLoaderName == input.ClassLoaderName ||
                    (this.ClassLoaderName != null &&
                    this.ClassLoaderName.Equals(input.ClassLoaderName))
                ) && 
                (
                    this.ModuleName == input.ModuleName ||
                    (this.ModuleName != null &&
                    this.ModuleName.Equals(input.ModuleName))
                ) && 
                (
                    this.ModuleVersion == input.ModuleVersion ||
                    (this.ModuleVersion != null &&
                    this.ModuleVersion.Equals(input.ModuleVersion))
                ) && 
                (
                    this.MethodName == input.MethodName ||
                    (this.MethodName != null &&
                    this.MethodName.Equals(input.MethodName))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.LineNumber == input.LineNumber ||
                    (this.LineNumber != null &&
                    this.LineNumber.Equals(input.LineNumber))
                ) && 
                (
                    this.ClassName == input.ClassName ||
                    (this.ClassName != null &&
                    this.ClassName.Equals(input.ClassName))
                ) && 
                (
                    this.NativeMethod == input.NativeMethod ||
                    (this.NativeMethod != null &&
                    this.NativeMethod.Equals(input.NativeMethod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClassLoaderName != null)
                    hashCode = hashCode * 59 + this.ClassLoaderName.GetHashCode();
                if (this.ModuleName != null)
                    hashCode = hashCode * 59 + this.ModuleName.GetHashCode();
                if (this.ModuleVersion != null)
                    hashCode = hashCode * 59 + this.ModuleVersion.GetHashCode();
                if (this.MethodName != null)
                    hashCode = hashCode * 59 + this.MethodName.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.LineNumber != null)
                    hashCode = hashCode * 59 + this.LineNumber.GetHashCode();
                if (this.ClassName != null)
                    hashCode = hashCode * 59 + this.ClassName.GetHashCode();
                if (this.NativeMethod != null)
                    hashCode = hashCode * 59 + this.NativeMethod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
