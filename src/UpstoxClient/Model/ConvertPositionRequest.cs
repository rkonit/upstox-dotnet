/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UpstoxClient.Client.SwaggerDateConverter;
namespace UpstoxClient.Model
{
    /// <summary>
    /// ConvertPositionRequest
    /// </summary>
    [DataContract]
        public partial class ConvertPositionRequest :  IEquatable<ConvertPositionRequest>, IValidatableObject
    {
        /// <summary>
        /// Indicates the new product to use for the convert positions
        /// </summary>
        /// <value>Indicates the new product to use for the convert positions</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum NewProductEnum
        {
            /// <summary>
            /// Enum I for value: I
            /// </summary>
            [EnumMember(Value = "I")]
            I = 1,
            /// <summary>
            /// Enum D for value: D
            /// </summary>
            [EnumMember(Value = "D")]
            D = 2,
            /// <summary>
            /// Enum CO for value: CO
            /// </summary>
            [EnumMember(Value = "CO")]
            CO = 3,
            /// <summary>
            /// Enum OCO for value: OCO
            /// </summary>
            [EnumMember(Value = "OCO")]
            OCO = 4,
            /// <summary>
            /// Enum MTF for value: MTF
            /// </summary>
            [EnumMember(Value = "MTF")]
            MTF = 5        }
        /// <summary>
        /// Indicates the new product to use for the convert positions
        /// </summary>
        /// <value>Indicates the new product to use for the convert positions</value>
        [DataMember(Name="new_product", EmitDefaultValue=false)]
        public NewProductEnum NewProduct { get; set; }
        /// <summary>
        /// Indicates the old product to use for the convert positions
        /// </summary>
        /// <value>Indicates the old product to use for the convert positions</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum OldProductEnum
        {
            /// <summary>
            /// Enum I for value: I
            /// </summary>
            [EnumMember(Value = "I")]
            I = 1,
            /// <summary>
            /// Enum D for value: D
            /// </summary>
            [EnumMember(Value = "D")]
            D = 2,
            /// <summary>
            /// Enum CO for value: CO
            /// </summary>
            [EnumMember(Value = "CO")]
            CO = 3,
            /// <summary>
            /// Enum OCO for value: OCO
            /// </summary>
            [EnumMember(Value = "OCO")]
            OCO = 4,
            /// <summary>
            /// Enum MTF for value: MTF
            /// </summary>
            [EnumMember(Value = "MTF")]
            MTF = 5        }
        /// <summary>
        /// Indicates the old product to use for the convert positions
        /// </summary>
        /// <value>Indicates the old product to use for the convert positions</value>
        [DataMember(Name="old_product", EmitDefaultValue=false)]
        public OldProductEnum OldProduct { get; set; }
        /// <summary>
        /// Indicates whether its a buy(b) or sell(s) order
        /// </summary>
        /// <value>Indicates whether its a buy(b) or sell(s) order</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TransactionTypeEnum
        {
            /// <summary>
            /// Enum BUY for value: BUY
            /// </summary>
            [EnumMember(Value = "BUY")]
            BUY = 1,
            /// <summary>
            /// Enum SELL for value: SELL
            /// </summary>
            [EnumMember(Value = "SELL")]
            SELL = 2        }
        /// <summary>
        /// Indicates whether its a buy(b) or sell(s) order
        /// </summary>
        /// <value>Indicates whether its a buy(b) or sell(s) order</value>
        [DataMember(Name="transaction_type", EmitDefaultValue=false)]
        public TransactionTypeEnum TransactionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertPositionRequest" /> class.
        /// </summary>
        /// <param name="instrumentToken">Key of the instrument (required).</param>
        /// <param name="newProduct">Indicates the new product to use for the convert positions (required).</param>
        /// <param name="oldProduct">Indicates the old product to use for the convert positions (required).</param>
        /// <param name="transactionType">Indicates whether its a buy(b) or sell(s) order (required).</param>
        /// <param name="quantity">Quantity with which the position to convert (required).</param>
        public ConvertPositionRequest(string instrumentToken = default(string), NewProductEnum newProduct = default(NewProductEnum), OldProductEnum oldProduct = default(OldProductEnum), TransactionTypeEnum transactionType = default(TransactionTypeEnum), int? quantity = default(int?))
        {
            // to ensure "instrumentToken" is required (not null)
            if (instrumentToken == null)
            {
                throw new InvalidDataException("instrumentToken is a required property for ConvertPositionRequest and cannot be null");
            }
            else
            {
                this.InstrumentToken = instrumentToken;
            }
            // to ensure "newProduct" is required (not null)
            if (newProduct == null)
            {
                throw new InvalidDataException("newProduct is a required property for ConvertPositionRequest and cannot be null");
            }
            else
            {
                this.NewProduct = newProduct;
            }
            // to ensure "oldProduct" is required (not null)
            if (oldProduct == null)
            {
                throw new InvalidDataException("oldProduct is a required property for ConvertPositionRequest and cannot be null");
            }
            else
            {
                this.OldProduct = oldProduct;
            }
            // to ensure "transactionType" is required (not null)
            if (transactionType == null)
            {
                throw new InvalidDataException("transactionType is a required property for ConvertPositionRequest and cannot be null");
            }
            else
            {
                this.TransactionType = transactionType;
            }
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for ConvertPositionRequest and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
        }
        
        /// <summary>
        /// Key of the instrument
        /// </summary>
        /// <value>Key of the instrument</value>
        [DataMember(Name="instrument_token", EmitDefaultValue=false)]
        public string InstrumentToken { get; set; }




        /// <summary>
        /// Quantity with which the position to convert
        /// </summary>
        /// <value>Quantity with which the position to convert</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConvertPositionRequest {\n");
            sb.Append("  InstrumentToken: ").Append(InstrumentToken).Append("\n");
            sb.Append("  NewProduct: ").Append(NewProduct).Append("\n");
            sb.Append("  OldProduct: ").Append(OldProduct).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConvertPositionRequest);
        }

        /// <summary>
        /// Returns true if ConvertPositionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ConvertPositionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConvertPositionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InstrumentToken == input.InstrumentToken ||
                    (this.InstrumentToken != null &&
                    this.InstrumentToken.Equals(input.InstrumentToken))
                ) && 
                (
                    this.NewProduct == input.NewProduct ||
                    (this.NewProduct != null &&
                    this.NewProduct.Equals(input.NewProduct))
                ) && 
                (
                    this.OldProduct == input.OldProduct ||
                    (this.OldProduct != null &&
                    this.OldProduct.Equals(input.OldProduct))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstrumentToken != null)
                    hashCode = hashCode * 59 + this.InstrumentToken.GetHashCode();
                if (this.NewProduct != null)
                    hashCode = hashCode * 59 + this.NewProduct.GetHashCode();
                if (this.OldProduct != null)
                    hashCode = hashCode * 59 + this.OldProduct.GetHashCode();
                if (this.TransactionType != null)
                    hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
