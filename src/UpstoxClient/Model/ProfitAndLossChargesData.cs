/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UpstoxClient.Client.SwaggerDateConverter;
namespace UpstoxClient.Model
{
    /// <summary>
    /// Response data for charges details
    /// </summary>
    [DataContract]
        public partial class ProfitAndLossChargesData :  IEquatable<ProfitAndLossChargesData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfitAndLossChargesData" /> class.
        /// </summary>
        /// <param name="taxes">taxes.</param>
        /// <param name="charges">charges.</param>
        public ProfitAndLossChargesData(ProfitAndLossChargesTaxes taxes = default(ProfitAndLossChargesTaxes), ProfitAndLossOtherChargesTaxes charges = default(ProfitAndLossOtherChargesTaxes))
        {
            this.Taxes = taxes;
            this.Charges = charges;
        }
        
        /// <summary>
        ///   Total charges for the user
        /// </summary>
        /// <value>  Total charges for the user</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public float? Total { get; private set; }

        /// <summary>
        /// Brokerage charges for the order
        /// </summary>
        /// <value>Brokerage charges for the order</value>
        [DataMember(Name="brokerage", EmitDefaultValue=false)]
        public float? Brokerage { get; private set; }

        /// <summary>
        /// Gets or Sets Taxes
        /// </summary>
        [DataMember(Name="taxes", EmitDefaultValue=false)]
        public ProfitAndLossChargesTaxes Taxes { get; set; }

        /// <summary>
        /// Gets or Sets Charges
        /// </summary>
        [DataMember(Name="charges", EmitDefaultValue=false)]
        public ProfitAndLossOtherChargesTaxes Charges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProfitAndLossChargesData {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Brokerage: ").Append(Brokerage).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  Charges: ").Append(Charges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProfitAndLossChargesData);
        }

        /// <summary>
        /// Returns true if ProfitAndLossChargesData instances are equal
        /// </summary>
        /// <param name="input">Instance of ProfitAndLossChargesData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfitAndLossChargesData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.Brokerage == input.Brokerage ||
                    (this.Brokerage != null &&
                    this.Brokerage.Equals(input.Brokerage))
                ) && 
                (
                    this.Taxes == input.Taxes ||
                    (this.Taxes != null &&
                    this.Taxes.Equals(input.Taxes))
                ) && 
                (
                    this.Charges == input.Charges ||
                    (this.Charges != null &&
                    this.Charges.Equals(input.Charges))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.Brokerage != null)
                    hashCode = hashCode * 59 + this.Brokerage.GetHashCode();
                if (this.Taxes != null)
                    hashCode = hashCode * 59 + this.Taxes.GetHashCode();
                if (this.Charges != null)
                    hashCode = hashCode * 59 + this.Charges.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
