/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UpstoxClient.Client.SwaggerDateConverter;
namespace UpstoxClient.Model
{
    /// <summary>
    /// Response data for trade wise data details
    /// </summary>
    [DataContract]
        public partial class TradeWiseProfitAndLossData :  IEquatable<TradeWiseProfitAndLossData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TradeWiseProfitAndLossData" /> class.
        /// </summary>
        public TradeWiseProfitAndLossData()
        {
        }
        
        /// <summary>
        /// The quantity of stock traded
        /// </summary>
        /// <value>The quantity of stock traded</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public float? Quantity { get; private set; }

        /// <summary>
        /// ISIN of the stock
        /// </summary>
        /// <value>ISIN of the stock</value>
        [DataMember(Name="isin", EmitDefaultValue=false)]
        public string Isin { get; private set; }

        /// <summary>
        /// Name of the scrip traded
        /// </summary>
        /// <value>Name of the scrip traded</value>
        [DataMember(Name="scrip_name", EmitDefaultValue=false)]
        public string ScripName { get; private set; }

        /// <summary>
        /// FUT - Futures   OPT - Options    EQ - Equity
        /// </summary>
        /// <value>FUT - Futures   OPT - Options    EQ - Equity</value>
        [DataMember(Name="trade_type", EmitDefaultValue=false)]
        public string TradeType { get; private set; }

        /// <summary>
        /// The date on which the stock was bought
        /// </summary>
        /// <value>The date on which the stock was bought</value>
        [DataMember(Name="buy_date", EmitDefaultValue=false)]
        public string BuyDate { get; private set; }

        /// <summary>
        /// The average rate at which each quantity of the stock was bought
        /// </summary>
        /// <value>The average rate at which each quantity of the stock was bought</value>
        [DataMember(Name="buy_average", EmitDefaultValue=false)]
        public float? BuyAverage { get; private set; }

        /// <summary>
        /// The date on which the stock was sold
        /// </summary>
        /// <value>The date on which the stock was sold</value>
        [DataMember(Name="sell_date", EmitDefaultValue=false)]
        public string SellDate { get; private set; }

        /// <summary>
        /// The average rate at which each quantity of the stock was sold
        /// </summary>
        /// <value>The average rate at which each quantity of the stock was sold</value>
        [DataMember(Name="sell_average", EmitDefaultValue=false)]
        public float? SellAverage { get; private set; }

        /// <summary>
        /// Total buy amount
        /// </summary>
        /// <value>Total buy amount</value>
        [DataMember(Name="buy_amount", EmitDefaultValue=false)]
        public float? BuyAmount { get; private set; }

        /// <summary>
        /// Total sell amount
        /// </summary>
        /// <value>Total sell amount</value>
        [DataMember(Name="sell_amount", EmitDefaultValue=false)]
        public float? SellAmount { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TradeWiseProfitAndLossData {\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  ScripName: ").Append(ScripName).Append("\n");
            sb.Append("  TradeType: ").Append(TradeType).Append("\n");
            sb.Append("  BuyDate: ").Append(BuyDate).Append("\n");
            sb.Append("  BuyAverage: ").Append(BuyAverage).Append("\n");
            sb.Append("  SellDate: ").Append(SellDate).Append("\n");
            sb.Append("  SellAverage: ").Append(SellAverage).Append("\n");
            sb.Append("  BuyAmount: ").Append(BuyAmount).Append("\n");
            sb.Append("  SellAmount: ").Append(SellAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TradeWiseProfitAndLossData);
        }

        /// <summary>
        /// Returns true if TradeWiseProfitAndLossData instances are equal
        /// </summary>
        /// <param name="input">Instance of TradeWiseProfitAndLossData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradeWiseProfitAndLossData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                ) && 
                (
                    this.ScripName == input.ScripName ||
                    (this.ScripName != null &&
                    this.ScripName.Equals(input.ScripName))
                ) && 
                (
                    this.TradeType == input.TradeType ||
                    (this.TradeType != null &&
                    this.TradeType.Equals(input.TradeType))
                ) && 
                (
                    this.BuyDate == input.BuyDate ||
                    (this.BuyDate != null &&
                    this.BuyDate.Equals(input.BuyDate))
                ) && 
                (
                    this.BuyAverage == input.BuyAverage ||
                    (this.BuyAverage != null &&
                    this.BuyAverage.Equals(input.BuyAverage))
                ) && 
                (
                    this.SellDate == input.SellDate ||
                    (this.SellDate != null &&
                    this.SellDate.Equals(input.SellDate))
                ) && 
                (
                    this.SellAverage == input.SellAverage ||
                    (this.SellAverage != null &&
                    this.SellAverage.Equals(input.SellAverage))
                ) && 
                (
                    this.BuyAmount == input.BuyAmount ||
                    (this.BuyAmount != null &&
                    this.BuyAmount.Equals(input.BuyAmount))
                ) && 
                (
                    this.SellAmount == input.SellAmount ||
                    (this.SellAmount != null &&
                    this.SellAmount.Equals(input.SellAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Isin != null)
                    hashCode = hashCode * 59 + this.Isin.GetHashCode();
                if (this.ScripName != null)
                    hashCode = hashCode * 59 + this.ScripName.GetHashCode();
                if (this.TradeType != null)
                    hashCode = hashCode * 59 + this.TradeType.GetHashCode();
                if (this.BuyDate != null)
                    hashCode = hashCode * 59 + this.BuyDate.GetHashCode();
                if (this.BuyAverage != null)
                    hashCode = hashCode * 59 + this.BuyAverage.GetHashCode();
                if (this.SellDate != null)
                    hashCode = hashCode * 59 + this.SellDate.GetHashCode();
                if (this.SellAverage != null)
                    hashCode = hashCode * 59 + this.SellAverage.GetHashCode();
                if (this.BuyAmount != null)
                    hashCode = hashCode * 59 + this.BuyAmount.GetHashCode();
                if (this.SellAmount != null)
                    hashCode = hashCode * 59 + this.SellAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
